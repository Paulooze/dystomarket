# Use the official Node.js 18 LTS image as the base image.  Use a specific version.
FROM node:22-alpine AS base

RUN corepack enable

# Set the working directory inside the container.
WORKDIR /app

# Install system-level dependencies.  Crucially, install openssl for Prisma.
# This is often missed, and causes cryptic errors on Alpine.
RUN apk add --no-cache openssl

# --- Builder Stage ---
FROM base AS builder

# Copy package.json and package-lock.json (or yarn.lock)
COPY package.json yarn.lock ./
COPY .yarnrc.yml ./
COPY .yarn/ ./.yarn/
COPY nx.json ./
COPY tsconfig.base.json ./

# Step 4: Install dependencies using NX caching (only what's needed for ai-news)

# Step 5: Copy only the AI News Generator app and shared libs
COPY apps/dystomarket-api/ ./apps/dystomarket-api/
COPY packages/ ./packages/

RUN yarn install
# Step 6: Set working directory to AI News Generator

# Step 7: Build the app (if needed)
RUN yarn nx build db
RUN yarn nx build api

# Step 8: Use a smaller runtime image
FROM node:22-alpine

# Step 9: Set working directory in the runtime container
WORKDIR /app

# Step 10: Copy dependencies from builder stage

# Step 11: Copy AI News Generator's app code
COPY --from=builder /app/apps/dystomarket-api ./apps/dystomarket-api
COPY --from=builder /app/packages ./packages

# Set environment variables.  These can be overridden by Cloud Run.
ENV NODE_ENV production
ENV PORT 8080

# Expose the port the app will listen on.
EXPOSE 8080

# Start the Next.js server.
CMD ["node",  "apps/dystomarket-api/dist/index.js"]
